name: Continuous integration

on:
  pull_request:
    branches:
      - '**'
  push:
    branches: [main]
    tags:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['lts/*']
    env:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: miniosecret
    services:
      minio:
        image: minio/minio
        ports:
          - 9000:9000
    steps:
      - name: Install imagemagick and rsvg-convert
        run: sudo apt-get install -y imagemagick librsvg2-bin
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install minio client and initialize minio buckets
        run: |
          wget https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set minio http://localhost:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
          ./mc mb minio/incoming
          ./mc mb minio/active
          ./mc anonymous set-json data/.minio.sys/buckets/active/policy.json minio/active
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: npm install, lint and build
        run: |
          npm ci
          npm run lint:ci
          npm run build
      - name: Run the unit tests, as well as tests against minio
        run: npm run test:ci
      - name: Send coverage to codacy
        # secrets are not available for PR from forks, and dependabot PRs
        if: ${{ github.event_name != 'pull_request' && github.actor != 'dependabot[bot]' }}
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: reports/coverage/unit/lcov.info,reports/coverage/s3/lcov.info

  publish:
    # only publish if tests passed
    needs: test
    # secrets are not available for PR from forks, and dependabot PRs, we don't want to build them
    if: ${{ github.event_name != 'pull_request' && github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: c2corg/c2c_images
      - name: Publish the docker image
        uses: docker/build-push-action@v3
        with:
          load: false
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  create-release:
    needs: test
    if: "contains(github.ref, 'refs/tags/v')"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate changelog for release
        id: release_changelog
        run: |
          previousTag=$(git tag | sort -V -r | head -2 | awk '{split($0, tags, "\n")} END {print tags[1]}')
          currentTag=$(git tag | sort -V -r | head -1)
          changelog=$(git log --pretty=oneline ${previousTag}..${currentTag} --no-merges)
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"
          echo "::set-output name=changelog::$changelog"
      - name: Create or update release
        uses: meeDamian/github-release@2.0
        with:
          body: ${{ steps.release_changelog.outputs.changelog }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          allow_override: true
